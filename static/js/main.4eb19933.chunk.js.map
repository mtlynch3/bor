{"version":3,"sources":["components/Debits.js","App.js","reportWebVitals.js","index.js"],"names":["Debits","props","debits","map","debit","date","slice","amount","description","id","App","addDebit","e","state","accountBalance","currentUser","userName","memberSince","credits","a","axios","get","data","debitSum","creditSum","forEach","credit","this","setState","exact","path","render","to","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"wQAgBeA,EAhBA,SAACC,GAQZ,OACC,gCACG,0CARmBA,EAAXC,OACMC,KAAI,SAACC,GACf,IAAIC,EAAOD,EAAMC,KAAKC,MAAM,EAAE,IAC9B,OAAO,+BAAoBF,EAAMG,OAA1B,IAAmCH,EAAMI,YAAzC,IAAuDH,IAA9CD,EAAMK,W,iBCI5BC,G,wDAEJ,WAAYT,GAAQ,IAAD,8BACjB,cAAMA,IAiCVU,SAAW,SAACC,KAhCR,EAAKC,MAAQ,CACXC,eAAgB,EAChBC,YAAa,CACXC,SAAU,UACVC,YAAa,YAEff,OAAQ,GACRgB,QAAS,IATM,E,4FAanB,oCAAAC,EAAA,sEACqBC,IAAMC,IAAI,wCAD/B,cACMnB,EADN,gBAEsBkB,IAAMC,IAAI,yCAFhC,OAEMH,EAFN,OAKEhB,EAASA,EAAOoB,KAChBJ,EAAUA,EAAQI,KAEdC,EAAW,EAAGC,EAAY,EAC9BtB,EAAOuB,SAAQ,SAACrB,GACdmB,GAAYnB,EAAMG,UAEpBW,EAAQO,SAAQ,SAACC,GACfF,GAAaE,EAAOnB,UAGlBO,EAAiBU,EAAYD,EACjCI,KAAKC,SAAS,CAAC1B,SAAQgB,UAASJ,mBAjBlC,iD,0EA0BA,WAAU,IAAD,OACCZ,EAAWyB,KAAKd,MAAhBX,OASR,OACI,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,IAAIC,OATb,kBACf,gCACE,yCACA,cAAC,IAAD,CAAMC,GAAG,UAAT,0BAOI,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,UAAUC,OAXZ,kBAAO,cAAC,EAAD,CAAQpB,SAAU,EAAKA,SAAUT,OAAQA,gB,GA5C1D+B,cAiEHvB,IC9DAwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASZ,OACP,cAAC,IAAMa,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4eb19933.chunk.js","sourcesContent":["const Debits = (props) => {\n\tlet debitsView = () => {\n        const { debits } = props;\n        return debits.map((debit) => {\n            let date = debit.date.slice(0,10);\n            return <li key={debit.id}>{debit.amount} {debit.description} {date}</li>\n        }) \n    }\n    return (\n    \t<div>\n    \t   <h1> Debits </h1>\n    \t   {debitsView()}\n    \t</div>\n\n    )\n}\nexport default Debits;","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route, Switch, Link} from 'react-router-dom';\n\nimport Debits from './components/Debits';\n\n\nimport axios from \"axios\";\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      accountBalance: 0,\n      currentUser: {\n        userName: 'melissa',\n        memberSince: '07/23/96',\n      },\n      debits: [],\n      credits: []\n    }\n  }\n\n  async componentDidMount() {\n    let debits = await axios.get(\"https://moj-api.herokuapp.com/debits\")\n    let credits = await axios.get(\"https://moj-api.herokuapp.com/credits\")\n   \n    //get data from API response\n    debits = debits.data\n    credits = credits.data\n\n    let debitSum = 0, creditSum = 0;\n    debits.forEach((debit) => {\n      debitSum += debit.amount\n    })\n    credits.forEach((credit) => {\n      creditSum += credit.amount\n    })\n\n    let accountBalance = creditSum - debitSum;\n    this.setState({debits, credits, accountBalance});\n  } \n\n\naddDebit = (e) => {\n    //send to debits view via props\n    //updates state based off user input\n}\n\n  render() {\n    const { debits } = this.state;\n\n    const DebitsComponent = () => (<Debits addDebit={this.addDebit} debits={debits} />);\n    const HomePage = () => (\n      <div>\n        <h1>Welcome</h1> \n        <Link to=\"/debits\">Debits</Link>\n      </div>\n    );\n    return (\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" render={HomePage} />\n            <Route exact path=\"/debits\" render={DebitsComponent}/>\n          </Switch>\n       \n\n        </Router>\n    );\n  }\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}